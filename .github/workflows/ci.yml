name: CI
 
on:
  push:
    branches: ["main"]
  pull_request:
    types: [opened, synchronize]
 
jobs:
  build:
    environment: production
    name: Build
    timeout-minutes: 15
    runs-on: ubuntu-latest
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ vars.TURBO_TEAM }}
      NEXT_TELEMETRY_DISABLED: 1
 
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
 
      - uses: pnpm/action-setup@v4
        with:
          version: 10.12.1
 
      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
 
      - name: Install dependencies
        run: pnpm install
      
      # Create a comprehensive .env file with explicit values
      - name: Create env file for vbpay
        run: |
          cat > apps/vbpay/.env << EOL
          # Payload Configuration
          PAYLOAD_SECRET_KEY=${{ secrets.PAYLOAD_SECRET_KEY }}
          # Database Configuration
          DB_HOST=${{ vars.DB_HOST }}
          DB_PORT=${{ vars.DB_PORT }}
          DB_USER=${{ vars.DB_USER }}
          DB_PASSWORD=${{ vars.DB_PASSWORD }}
          DB_NAME=${{ vars.DB_NAME }}
          
          # AWS Configuration
          AWS_COGNITO_USER_POOL_ID=${{ secrets.AWS_COGNITO_USER_POOL_ID }}
          AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN=${{ secrets.AWS_SESSION_TOKEN }}
          AWS_REGION=${{ vars.AWS_REGION }}
          
          # Application Configuration
          NODE_ENV=production
          NEXT_PUBLIC_TIMEZONE=${{ vars.NEXT_PUBLIC_TIMEZONE }}
          EOL
          
          echo "Created .env file at apps/vbpay/.env"
          ls -la apps/vbpay/.env

      # Create a comprehensive .env file with explicit values
      - name: Create env file for vbcall
        run: |
          cat > apps/vbcall/.env << EOL
          # Database Configuration
          DB_HOST=${{ vars.DB_HOST }}
          DB_PORT=${{ vars.DB_PORT }}
          DB_USER=${{ vars.DB_USER }}
          DB_PASSWORD=${{ vars.DB_PASSWORD }}
          DB_NAME=${{ vars.DB_NAME }}
          
          # AWS Configuration
          AWS_COGNITO_USER_POOL_ID=${{ secrets.AWS_COGNITO_USER_POOL_ID }}
          AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN=${{ secrets.AWS_SESSION_TOKEN }}
          AWS_REGION=${{ vars.AWS_REGION }}
          
          # Application Configuration
          NODE_ENV=production
          NEXT_PUBLIC_TIMEZONE=${{ vars.NEXT_PUBLIC_TIMEZONE }}
          EOL
          
          echo "Created .env file at apps/vbcall/.env"
          ls -la apps/vbcall/.env
      
      # Examine AWS environment variable existence (without revealing values)
      - name: Check AWS environment variables
        run: |
          if [ -n "$AWS_COGNITO_USER_POOL_ID" ]; then 
            echo "AWS_COGNITO_USER_POOL_ID exists with length: ${#AWS_COGNITO_USER_POOL_ID}"
          else 
            echo "AWS_COGNITO_USER_POOL_ID is not set"
          fi

          if [ -n "$AWS_ACCESS_KEY_ID" ]; then 
            echo "AWS_ACCESS_KEY_ID exists with length: ${#AWS_ACCESS_KEY_ID}"
          else 
            echo "AWS_ACCESS_KEY_ID is not set"
          fi
          
          if [ -n "$AWS_SECRET_ACCESS_KEY" ]; then 
            echo "AWS_SECRET_ACCESS_KEY exists with length: ${#AWS_SECRET_ACCESS_KEY}"
          else 
            echo "AWS_SECRET_ACCESS_KEY is not set"
          fi
          
          if [ -n "$AWS_SESSION_TOKEN" ]; then 
            echo "AWS_SESSION_TOKEN exists with length: ${#AWS_SESSION_TOKEN}"
          else 
            echo "AWS_SESSION_TOKEN is not set"
          fi
        env:
          AWS_COGNITO_USER_POOL_ID: ${{ secrets.AWS_COGNITO_USER_POOL_ID }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
      
      # Extract AWS credentials for the page precompilation step
      - name: Extract AWS config for Next.js
        run: |
          mkdir -p ~/.aws
          
          cat > ~/.aws/credentials << EOL
          [default]
          aws_cognito_user_pool_id = ${{ secrets.AWS_COGNITO_USER_POOL_ID }}
          aws_access_key_id = ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key = ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_session_token = ${{ secrets.AWS_SESSION_TOKEN }}
          EOL
          
          cat > ~/.aws/config << EOL
          [default]
          region = ${{ vars.AWS_REGION }} 
          EOL
          
          chmod 600 ~/.aws/credentials
          chmod 600 ~/.aws/config
          
          echo "AWS config files created"
        
      # Build with explicit environment variables
      - name: Build
        run: pnpm turbo build --force
        env:
          # Explicitly set all required environment variables for the build
          PAYLOAD_SECRET_KEY: ${{ secrets.PAYLOAD_SECRET_KEY }}
          AWS_COGNITO_USER_POOL_ID: ${{ secrets.AWS_COGNITO_USER_POOL_ID }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
          AWS_REGION: ${{ vars.AWS_REGION }}
          AWS_SDK_LOAD_CONFIG: 1
          DB_HOST: ${{ vars.DB_HOST }}
          DB_PORT: ${{ vars.DB_PORT }}
          DB_USER: ${{ vars.DB_USER }}
          DB_PASSWORD: ${{ vars.DB_PASSWORD }}
          DB_NAME: ${{ vars.DB_NAME }}
          NODE_ENV: production
          NEXT_PUBLIC_TIMEZONE: ${{ vars.NEXT_PUBLIC_TIMEZONE }}
          TURBO_FORCE: true
          NEXT_PUBLIC_RUNTIME_ENV: production
